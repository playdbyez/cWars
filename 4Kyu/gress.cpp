//// DONES!
//Expected: equal to [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]

//Actual: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 14 ]

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    

vector<std::vector<int>> snail_map = {{1,2,3,4}, {12,13,14,5}, {11,16,15,6}, {10,9,8,7}};
  vector <int> sero = {} ;
  vector <int> sn = {1} ;
  vector <int> spath = {} ;
  
  //Zero
  //if (snail_map[0].size() == 0){ return sero;}
  //cout << snail_map.size()<<endl;

  //One
  //if (snail_map[0].size() == 1){ return sn;}
   
  int scol = snail_map.size();
  int srow = -1;
   if (scol > 1){srow = snail_map[0].size();}
  
  
  int dr = scol-1;
  int ul = 0;
  int ur = srow -1;
  int dl = 0;
  
  bool out = 0;
  int cari = 0;
  int carj= 0;
  int totalsize = 0;
  
  for (size_t i = 0; i < scol; i++){for (size_t j = 0; j < srow; j++){ totalsize++;}}
 
  
  

  
  if (scol > 1){
    for (size_t i =0; i < scol; i++)
    { if (out == 1) {break;}
         i = ul; 
      for (size_t j =0; j < srow; j++)
      { 
          
          
           if ( spath.size() == totalsize-1){ cout << "Size match!" <<endl;out =1;break;}
          
          
          if (spath.size() == 0 ){spath.push_back(snail_map[0][0]);}
          
          
          
          
        
             if (i == ul ){j = carj;
            while(j < ur ){j++;spath.push_back(snail_map[i][j]); if ( spath.size() == totalsize){ cout << "Size match!!" <<endl;out =1;break;}} ul++;}
        
            if (j == ur){ carj = j;   
            while(i < dr ){ i++; spath.push_back(snail_map[i][j]);   if ( spath.size() == totalsize){ cout << "Size match!!" <<endl;out =1;break;} }ur--;}
            
            if (i == dr) {cari = i; j = carj; 
            while(j > dl ){ j--;spath.push_back(snail_map[i][j]);    if ( spath.size() == totalsize){ cout << "Size match!!" <<endl;out =1;break;} } dr--;}
            
            if (j == dl){ carj = j; i = cari;
            while(i > ul ){ i--;spath.push_back(snail_map[i][j]);    if ( spath.size() == totalsize){ cout << "Size match!!" <<endl;out =1;break;} } dl = ul; }    
            
           
            
            
        
                               
      }
    }
  }
  
    for (size_t m =0; m < spath.size(); m++){
            cout << spath[m] << " ";
    }
}



/*
MAP
446 921 663 738 370 369 327 527 858 713 893 847 452 
97 123 187 523 611 939 653 143 938 742 733 336 979 
537 487 704 122 574 616 720 157 914 430 486 99 106 
70 602 583 637 553 589 521 605 170 17 583 780 184 
173 100 300 907 988 812 991 329 902 941 906 21 402 
742 229 384 82 790 962 889 893 265 610 1 89 991 
901 860 754 687 845 711 598 435 719 602 176 742 238 
993 871 797 815 365 973 223 667 310 357 159 818 401 
399 232 637 872 955 811 97 183 818 821 652 499 688 
114 679 640 892 936 682 573 898 367 73 996 216 176 
395 233 58 297 936 815 693 633 853 358 853 704 471 
722 249 7 950 485 616 629 243 642 489 364 648 706 
933 410 577 880 479 699 58 964 868 110 464 263 375 

Actual
[ 446, 921, 663, 738, 370, 369, 327, 527, 858, 713, 893, 847, 452, 979, 106, 184, 402, 991, 238, 401, 688, 176, 471, 706, 375, 263, 464, 110, 868, 964, 58, 699, 479, 880, 577, 410, 933, 722, 395, 114, 399, 993, 901, 742, 173, 70, 537, 97, 97, 123, 187, 523, 611, 939, 653, 143, 938, 742, 733, 336, 99, 780, 21, 89, 742, 818, 499, 216, 704, 648, 364, 489, 642, 243, 629, 616, 485, 950, 7, 249, 722, 395, 114, 399, 993, 901, 742, 173, 70, 537, 537, 487, 704, 122, 574, 616, 720, 157, 914, 430, 486, 583, 906, 1, 176, 159, 652, 996, 853, 358, 853, 633, 693, 815, 936, 297, 58, 233, 679, 232, 871, 860, 229, 100, 602, 602, 583, 637, 553, 589, 521, 605, 170, 17, 941, 610, 602, 357, 821, 73, 367, 898, 573, 682, 936, 892, 640, 637, 797, 754, 384, 300, 300, 907, 988, 812, 991, 329, 902, 265, 719, 310, 818, 183, 97, 811, 955, 872, 815 ]

Expected
[ 446, 921, 663, 738, 370, 369, 327, 527, 858, 713, 893, 847, 452, 979, 106, 184, 402, 991, 238, 401, 688, 176, 471, 706, 375, 263, 464, 110, 868, 964, 58, 699, 479, 880, 577, 410, 933, 722, 395, 114, 399, 993, 901, 742, 173, 70, 537, 97, 123, 187, 523, 611, 939, 653, 143, 938, 742, 733, 336, 99, 780, 21, 89, 742, 818, 499, 216, 704, 648, 364, 489, 642, 243, 629, 616, 485, 950, 7, 249, 233, 679, 232, 871, 860, 229, 100, 602, 487, 704, 122, 574, 616, 720, 157, 914, 430, 486, 583, 906, 1, 176, 159, 652, 996, 853, 358, 853, 633, 693, 815, 936, 297, 58, 640, 637, 797, 754, 384, 300, 583, 637, 553, 589, 521, 605, 170, 17, 941, 610, 602, 357, 821, 73, 367, 898, 573, 682, 936, 892, 872, 815, 687, 82, 907, 988, 812, 991, 329, 902, 265, 719, 310, 818, 183, 97, 811, 955, 365, 845, 790, 962, 889, 893, 435, 667, 223, 973, 711, 598

*/
